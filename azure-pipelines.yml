trigger:
  branches:
    include:
      - master
  paths:
    include:
      - '*'

# Define el pool de agentes que se usará para ejecutar el pipeline.
# En este caso, se utiliza una máquina virtual con Ubuntu.
pool:
  vmImage: ubuntu-latest

# Define variables que se pueden usar en todo el pipeline.
variables:
  # Nombre de la imagen Docker que se generará.
  imageName: mi-app-python
  # Dirección del registro de contenedores en Azure Container Registry (ACR).
  registry: proyectoredesslfj.azurecr.io

steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.x'
    displayName: 'Seleccionar Python 3.x'

  - script: |
      python -m pip install --upgrade pip
      pip install -r src/requirements.txt
    displayName: 'Instalar dependencias (local)'

  - task: Docker@2
    displayName: 'Build & Push Docker image to ACR'
    inputs:
      # Especifica la conexión al registro de contenedores configurada en Azure DevOps.
      containerRegistry: 'dockerRegistryServiceConnection'
      # Define el repositorio completo dentro del ACR (registro/nombre de la imagen).
      repository: '$(registry)/$(imageName)'
      # Indica que se ejecutará el comando para construir y subir la imagen.
      command: buildAndPush
      # Especifica la ubicación del archivo `Dockerfile` que se usará para construir la imagen.
      dockerfile: 'Dockerfile'
      # Define las etiquetas que se asignarán a la imagen Docker.
      tags: |
        latest
        $(Build.BuildId)

  - task: Kubernetes@1
    displayName: 'Actualizar deployment en Kubernetes'
    inputs:
      connectionType: 'Azure Resource Manager'
      azureSubscriptionEndpoint: 'ConexiónAKSRedes'
      azureResourceGroup: 'ProyectoRedes'
      kubernetesCluster: 'redes-proyecto'
      namespace: 'default'
      command: 'apply'
      useConfigurationFile: true
      configuration: 'k8s/deployment.yaml'