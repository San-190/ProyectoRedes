# Configura el disparador del pipeline para ejecutarse automáticamente
trigger:
  # Especifica las ramas que activarán el pipeline
  branches:
    include:
      - master  # Solo la rama 'master' activa el pipeline
  # Especifica los paths que activarán el pipeline
  paths:
    include:
      - '*'  # Cualquier cambio en cualquier archivo activa el pipeline

# Define el pool de agentes que se usará para ejecutar el pipeline.
# En este caso, se utiliza una máquina virtual con Ubuntu.
pool:
  vmImage: ubuntu-latest

# Define variables que se pueden usar en todo el pipeline.
variables:
  # Nombre de la imagen Docker que se generará.
  imageName: mi-app-python
  # Dirección del registro de contenedores en Azure Container Registry (ACR).
  registry: proyectoredesslfj.azurecr.io

steps:
  # Selecciona la versión de Python a usar en el agente
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.x'  # Especifica que se usará cualquier versión 3.x de Python
    displayName: 'Seleccionar Python 3.x'

  # Instala y actualiza pip, luego instala las dependencias del proyecto localmente
  - script: |
      python -m pip install --upgrade pip
      pip install -r src/requirements.txt
    displayName: 'Instalar dependencias (local)'

  # Construye y sube la imagen Docker al Azure Container Registry (ACR)
  - task: Docker@2
    displayName: 'Build & Push Docker image to ACR'
    inputs:
      # Especifica la conexión al registro de contenedores configurada en Azure DevOps.
      containerRegistry: 'dockerRegistryServiceConnection'
      # Define el repositorio completo dentro del ACR (registro/nombre de la imagen).
      repository: '$(registry)/$(imageName)'
      # Indica que se ejecutará el comando para construir y subir la imagen.
      command: buildAndPush
      # Especifica la ubicación del archivo `Dockerfile` que se usará para construir la imagen.
      dockerfile: 'Dockerfile'
      # Define las etiquetas que se asignarán a la imagen Docker.
      tags: |
        latest
        $(Build.BuildId)

  - task: Kubernetes@1  # Tarea de Kubernetes para interactuar con el clúster
    displayName: 'Actualizar deployment en Kubernetes'  # Nombre descriptivo de la tarea en el pipeline
    inputs:
      connectionType: 'Azure Resource Manager'  # Tipo de conexión, en este caso Azure Resource Manager
      azureSubscriptionEndpoint: 'ConexiónAKSRedes'  # Nombre de la conexión al recurso de suscripción de Azure
      azureResourceGroup: 'ProyectoRedes'  # Grupo de recursos de Azure donde está el clúster
      kubernetesCluster: 'redes-proyecto'  # Nombre del clúster de Kubernetes
      namespace: 'default'  # Namespace de Kubernetes donde se aplicará el deployment
      command: 'apply'  # Comando a ejecutar, en este caso aplicar la configuración
      useConfigurationFile: true  # Indica que se usará un archivo de configuración
      configuration: 'k8s/deployment.yaml'  # Ruta al archivo de configuración de Kubernetes